/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staker, StakerInterface } from "../Staker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_master",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pId",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pId",
        type: "uint256",
      },
    ],
    name: "claimVote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "master",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nodeVoting",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pId",
        type: "uint256",
      },
    ],
    name: "unVote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200152338038062001523833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001ed565b92915050565b6000602082840312156200019b576200019a620001e8565b5b6000620001ab848285016200016b565b91505092915050565b6000620001c182620001c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001f881620001b4565b81146200020457600080fd5b50565b61130c80620002176000396000f3fe6080604052600436106100865760003560e01c80639fd6adb3116100595780639fd6adb31461013b578063a3a4333b1461017a578063ee97f7f3146101b7578063f2fde38b146101e2578063f9f4b72c1461020b57610086565b80630121b93f1461008b5780630962ef79146100bc578063715018a6146100f95780638da5cb5b14610110575b600080fd5b6100a560048036038101906100a09190610e2f565b610236565b6040516100b3929190611073565b60405180910390f35b3480156100c857600080fd5b506100e360048036038101906100de9190610e2f565b61040a565b6040516100f0919061102f565b60405180910390f35b34801561010557600080fd5b5061010e610557565b005b34801561011c57600080fd5b506101256105df565b6040516101329190610f6b565b60405180910390f35b34801561014757600080fd5b50610162600480360381019061015d9190610e2f565b610608565b6040516101719392919061109c565b60405180910390f35b34801561018657600080fd5b506101a1600480360381019061019c9190610e2f565b610892565b6040516101ae919061102f565b60405180910390f35b3480156101c357600080fd5b506101cc6109b8565b6040516101d99190610f6b565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190610da8565b6109de565b005b34801561021757600080fd5b50610220610ad6565b60405161022d9190610f6b565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c09061100f565b60405180910390fd5b73d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff16630121b93f34856040518363ffffffff1660e01b8152600401610317919061102f565b6000604051808303818588803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b5050505050600073d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff166393f1a40b85306040518363ffffffff1660e01b815260040161039a92919061104a565b6040805180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190610e02565b905060006103f7610aee565b9050816000015181935093505050915091565b60008073d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff166398969e8284306040518363ffffffff1660e01b815260040161045c92919061104a565b60206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac9190610e5c565b9050600081111561054c5773d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff1663ae169a50846040518263ffffffff1660e01b8152600401610504919061102f565b600060405180830381600087803b15801561051e57600080fd5b505af1158015610532573d6000803e3d6000fd5b505050506000610540610aee565b90508092505050610552565b60009150505b919050565b61055f610bd4565b73ffffffffffffffffffffffffffffffffffffffff1661057d6105df565b73ffffffffffffffffffffffffffffffffffffffff16146105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610fcf565b60405180910390fd5b6105dd6000610bdc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106949061100f565b60405180910390fd5b600073d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff166393f1a40b86306040518363ffffffff1660e01b81526004016106ee92919061104a565b6040805180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190610e02565b905073d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff1663edf949e88683600001516040518363ffffffff1660e01b8152600401610794929190611073565b600060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b50505050600073d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff1663904af02e30886040518363ffffffff1660e01b8152600401610817929190610f86565b606060405180830381600087803b15801561083157600080fd5b505af1158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190610dd5565b90506000610875610aee565b905081600001518260400151829550955095505050509193909250565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b9061100f565b60405180910390fd5b73d924393a93ee62c7b7e515e65270756f569fa9bf73ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401610971919061102f565b600060405180830381600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b5050505060006109ad610aee565b905080915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109e6610bd4565b73ffffffffffffffffffffffffffffffffffffffff16610a046105df565b73ffffffffffffffffffffffffffffffffffffffff1614610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190610fcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190610faf565b60405180910390fd5b610ad381610bdc565b50565b73d924393a93ee62c7b7e515e65270756f569fa9bf81565b6000804790506000811115610bcd576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610b4590610f56565b60006040518083038185875af1925050503d8060008114610b82576040519150601f19603f3d011682016040523d82523d6000602084013e610b87565b606091505b5050905080610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290610fef565b60405180910390fd5b505b8091505090565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610caf81611298565b92915050565b600081519050610cc4816112af565b92915050565b600060608284031215610ce057610cdf6111b0565b5b610cea60606110d3565b90506000610cfa84828501610d93565b6000830152506020610d0e84828501610cb5565b6020830152506040610d2284828501610d93565b60408301525092915050565b600060408284031215610d4457610d436111b0565b5b610d4e60406110d3565b90506000610d5e84828501610d93565b6000830152506020610d7284828501610d93565b60208301525092915050565b600081359050610d8d816112bf565b92915050565b600081519050610da2816112bf565b92915050565b600060208284031215610dbe57610dbd6111b5565b5b6000610dcc84828501610ca0565b91505092915050565b600060608284031215610deb57610dea6111b5565b5b6000610df984828501610cca565b91505092915050565b600060408284031215610e1857610e176111b5565b5b6000610e2684828501610d2e565b91505092915050565b600060208284031215610e4557610e446111b5565b5b6000610e5384828501610d7e565b91505092915050565b600060208284031215610e7257610e716111b5565b5b6000610e8084828501610d93565b91505092915050565b610e9281611114565b82525050565b6000610ea5602683611103565b9150610eb0826111cb565b604082019050919050565b6000610ec8602083611103565b9150610ed38261121a565b602082019050919050565b6000610eeb601483611103565b9150610ef682611243565b602082019050919050565b6000610f0e6000836110f8565b9150610f198261126c565b600082019050919050565b6000610f31601083611103565b9150610f3c8261126f565b602082019050919050565b610f5081611146565b82525050565b6000610f6182610f01565b9150819050919050565b6000602082019050610f806000830184610e89565b92915050565b6000604082019050610f9b6000830185610e89565b610fa86020830184610f47565b9392505050565b60006020820190508181036000830152610fc881610e98565b9050919050565b60006020820190508181036000830152610fe881610ebb565b9050919050565b6000602082019050818103600083015261100881610ede565b9050919050565b6000602082019050818103600083015261102881610f24565b9050919050565b60006020820190506110446000830184610f47565b92915050565b600060408201905061105f6000830185610f47565b61106c6020830184610e89565b9392505050565b60006040820190506110886000830185610f47565b6110956020830184610f47565b9392505050565b60006060820190506110b16000830186610f47565b6110be6020830185610f47565b6110cb6040830184610f47565b949350505050565b60006110dd6110ee565b90506110e98282611150565b919050565b6000604051905090565b600081905092915050565b600082825260208201905092915050565b600061111f82611126565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611159826111ba565b810181811067ffffffffffffffff8211171561117857611177611181565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552523a205452414e53464552204641494c4544000000000000000000000000600082015250565b50565b7f4552523a2041555448204641494c454400000000000000000000000000000000600082015250565b6112a181611114565b81146112ac57600080fd5b50565b600281106112bc57600080fd5b50565b6112c881611146565b81146112d357600080fd5b5056fea2646970667358221220580b8f38eb8eb2b45df22e110b2695718a09c081051c463306d1105e944333f164736f6c63430008050033";

export class Staker__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staker> {
    return super.deploy(_master, overrides || {}) as Promise<Staker>;
  }
  getDeployTransaction(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_master, overrides || {});
  }
  attach(address: string): Staker {
    return super.attach(address) as Staker;
  }
  connect(signer: Signer): Staker__factory {
    return super.connect(signer) as Staker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakerInterface {
    return new utils.Interface(_abi) as StakerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Staker {
    return new Contract(address, _abi, signerOrProvider) as Staker;
  }
}
