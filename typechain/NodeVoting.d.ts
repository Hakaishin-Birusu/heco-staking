/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NodeVotingInterface extends ethers.utils.Interface {
  functions: {
    "ACCOUNTANT_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_TOTAL_SHARES()": FunctionFragment;
    "MAX_FEE_SHARES()": FunctionFragment;
    "VOTE_UNIT()": FunctionFragment;
    "_isWithdrawable(address,uint256)": FunctionFragment;
    "addValidatorPool(address,uint256)": FunctionFragment;
    "claimFeeReward()": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "feeSetLockingDuration()": FunctionFragment;
    "getAccountant(uint256)": FunctionFragment;
    "getAccountantLength()": FunctionFragment;
    "getPoolLength()": FunctionFragment;
    "getPoolWithStatus(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getUserVotingSummary(address)": FunctionFragment;
    "grantAccountant(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "isAccountant(address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "nodeStaking()": FunctionFragment;
    "notifyRewardAmount(address[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingFeeReward(address)": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAccountant(address)": FunctionFragment;
    "revokeLockingDuration()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "revokeVote(uint256,uint256)": FunctionFragment;
    "revokingInfo(address,uint256)": FunctionFragment;
    "setFeeSetLockingDuration(uint256)": FunctionFragment;
    "setFeeSharesOfValidator(uint256)": FunctionFragment;
    "setPoolEnabled(uint256,bool)": FunctionFragment;
    "setRevokeLockingDuration(uint256)": FunctionFragment;
    "totalBallot()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCOUNTANT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_TOTAL_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VOTE_UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_isWithdrawable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidatorPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFeeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeSetLockingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountantLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolWithStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVotingSummary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccountant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountant",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nodeStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingFeeReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccountant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLockingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSetLockingDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSharesOfValidator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolEnabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokeLockingDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBallot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCOUNTANT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TOTAL_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VOTE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidatorPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSetLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountantLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolWithStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVotingSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSetLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSharesOfValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokeLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddValidatorPool(address,uint256,uint256)": EventFragment;
    "ClaimFeeReward(address,uint256,uint256)": EventFragment;
    "ClaimReward(address,uint256,uint256)": EventFragment;
    "NotifyReward(address,uint256,uint256)": EventFragment;
    "NotifyRewardSummary(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Revoke(address,uint256,uint256,uint256)": EventFragment;
    "RewardTransfer(address,address,uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetAccountant(address)": EventFragment;
    "SetFeeSetLockingDuration(uint256)": EventFragment;
    "SetFeeShares(address,uint256,uint256)": EventFragment;
    "SetPoolEnabled(uint256,bool)": EventFragment;
    "SetRevokeLockingDuration(uint256)": EventFragment;
    "Vote(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddValidatorPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFeeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyRewardSummary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAccountant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeSetLockingDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRevokeLockingDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddValidatorPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    feeShares: BigNumber;
  }
>;

export type ClaimFeeRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    validator: string;
    pid: BigNumber;
    feeReward: BigNumber;
  }
>;

export type ClaimRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    pendingReward: BigNumber;
  }
>;

export type NotifyRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    reward1: BigNumber;
    reward2: BigNumber;
  }
>;

export type NotifyRewardSummaryEvent = TypedEvent<
  [BigNumber, BigNumber] & { inputLength: BigNumber; okLength: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RevokeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
    lockingEndTime: BigNumber;
  }
>;

export type RewardTransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; amount: BigNumber }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetAccountantEvent = TypedEvent<[string] & { accountant: string }>;

export type SetFeeSetLockingDurationEvent = TypedEvent<
  [BigNumber] & { duration: BigNumber }
>;

export type SetFeeSharesEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    shares: BigNumber;
  }
>;

export type SetPoolEnabledEvent = TypedEvent<
  [BigNumber, boolean] & { pid: BigNumber; enabled: boolean }
>;

export type SetRevokeLockingDurationEvent = TypedEvent<
  [BigNumber] & { duration: BigNumber }
>;

export type VoteEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export class NodeVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NodeVotingInterface;

  functions: {
    ACCOUNTANT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isWithdrawable(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addValidatorPool(
      _validator: string,
      _feeShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFeeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountant(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAccountantLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolWithStatus(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        number
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserVotingSummary(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          validator: string;
          pid: BigNumber;
          validatorBallot: BigNumber;
          feeShares: BigNumber;
          ballot: BigNumber;
          pendingReward: BigNumber;
          revokingBallot: BigNumber;
          revokeLockingEndTime: BigNumber;
        })[]
      ] & {
        votingDataList: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          validator: string;
          pid: BigNumber;
          validatorBallot: BigNumber;
          feeShares: BigNumber;
          ballot: BigNumber;
          pendingReward: BigNumber;
          revokingBallot: BigNumber;
          revokeLockingEndTime: BigNumber;
        })[];
      }
    >;

    grantAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _nodeStaking: string,
      _revokeLockingDuration: BigNumberish,
      _feeSetLockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(_validator: string, overrides?: CallOverrides): Promise<[boolean]>;

    nodeStaking(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _validators: string[],
      _rewardAmounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingFeeReward(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        validator: string;
        feeShares: BigNumber;
        pendingFee: BigNumber;
        feeDebt: BigNumber;
        lastRewardBlock: BigNumber;
        feeSettLockingEndTime: BigNumber;
        ballotSupply: BigNumber;
        accRewardPerShare: BigNumber;
        enabled: boolean;
        voterNumber: BigNumber;
        electedNumber: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeVote(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        amount: BigNumber;
        status: number;
        lockingEndTime: BigNumber;
      }
    >;

    setFeeSetLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeSharesOfValidator(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolEnabled(
      _pid: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevokeLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBallot(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    vote(
      _pid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ACCOUNTANT_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  _isWithdrawable(
    _user: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addValidatorPool(
    _validator: string,
    _feeShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFeeReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountant(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccountantLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolWithStatus(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      number
    ]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserVotingSummary(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      validator: string;
      pid: BigNumber;
      validatorBallot: BigNumber;
      feeShares: BigNumber;
      ballot: BigNumber;
      pendingReward: BigNumber;
      revokingBallot: BigNumber;
      revokeLockingEndTime: BigNumber;
    })[]
  >;

  grantAccountant(
    _accountant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _nodeStaking: string,
    _revokeLockingDuration: BigNumberish,
    _feeSetLockingDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAccountant(
    _accountant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  nodeStaking(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _validators: string[],
    _rewardAmounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingFeeReward(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      validator: string;
      feeShares: BigNumber;
      pendingFee: BigNumber;
      feeDebt: BigNumber;
      lastRewardBlock: BigNumber;
      feeSettLockingEndTime: BigNumber;
      ballotSupply: BigNumber;
      accRewardPerShare: BigNumber;
      enabled: boolean;
      voterNumber: BigNumber;
      electedNumber: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAccountant(
    _accountant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeVote(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokingInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      amount: BigNumber;
      status: number;
      lockingEndTime: BigNumber;
    }
  >;

  setFeeSetLockingDuration(
    _lockingDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeSharesOfValidator(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolEnabled(
    _pid: BigNumberish,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevokeLockingDuration(
    _lockingDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  vote(
    _pid: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCOUNTANT_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    _isWithdrawable(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addValidatorPool(
      _validator: string,
      _feeShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFeeReward(overrides?: CallOverrides): Promise<void>;

    claimReward(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountant(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountantLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolWithStatus(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        number
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVotingSummary(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        validator: string;
        pid: BigNumber;
        validatorBallot: BigNumber;
        feeShares: BigNumber;
        ballot: BigNumber;
        pendingReward: BigNumber;
        revokingBallot: BigNumber;
        revokeLockingEndTime: BigNumber;
      })[]
    >;

    grantAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _nodeStaking: string,
      _revokeLockingDuration: BigNumberish,
      _feeSetLockingDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(_validator: string, overrides?: CallOverrides): Promise<boolean>;

    nodeStaking(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _validators: string[],
      _rewardAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingFeeReward(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        validator: string;
        feeShares: BigNumber;
        pendingFee: BigNumber;
        feeDebt: BigNumber;
        lastRewardBlock: BigNumber;
        feeSettLockingEndTime: BigNumber;
        ballotSupply: BigNumber;
        accRewardPerShare: BigNumber;
        enabled: boolean;
        voterNumber: BigNumber;
        electedNumber: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeVote(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        amount: BigNumber;
        status: number;
        lockingEndTime: BigNumber;
      }
    >;

    setFeeSetLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeSharesOfValidator(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolEnabled(
      _pid: BigNumberish,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevokeLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    vote(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddValidatorPool(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      feeShares?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; feeShares: BigNumber }
    >;

    AddValidatorPool(
      user?: string | null,
      pid?: BigNumberish | null,
      feeShares?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; feeShares: BigNumber }
    >;

    "ClaimFeeReward(address,uint256,uint256)"(
      validator?: string | null,
      pid?: BigNumberish | null,
      feeReward?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { validator: string; pid: BigNumber; feeReward: BigNumber }
    >;

    ClaimFeeReward(
      validator?: string | null,
      pid?: BigNumberish | null,
      feeReward?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { validator: string; pid: BigNumber; feeReward: BigNumber }
    >;

    "ClaimReward(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      pendingReward?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; pendingReward: BigNumber }
    >;

    ClaimReward(
      user?: string | null,
      pid?: BigNumberish | null,
      pendingReward?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; pendingReward: BigNumber }
    >;

    "NotifyReward(address,uint256,uint256)"(
      user?: string | null,
      reward1?: null,
      reward2?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; reward1: BigNumber; reward2: BigNumber }
    >;

    NotifyReward(
      user?: string | null,
      reward1?: null,
      reward2?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; reward1: BigNumber; reward2: BigNumber }
    >;

    "NotifyRewardSummary(uint256,uint256)"(
      inputLength?: null,
      okLength?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inputLength: BigNumber; okLength: BigNumber }
    >;

    NotifyRewardSummary(
      inputLength?: null,
      okLength?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inputLength: BigNumber; okLength: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Revoke(address,uint256,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      lockingEndTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        amount: BigNumber;
        lockingEndTime: BigNumber;
      }
    >;

    Revoke(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      lockingEndTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        amount: BigNumber;
        lockingEndTime: BigNumber;
      }
    >;

    "RewardTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    RewardTransfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetAccountant(address)"(
      accountant?: string | null
    ): TypedEventFilter<[string], { accountant: string }>;

    SetAccountant(
      accountant?: string | null
    ): TypedEventFilter<[string], { accountant: string }>;

    "SetFeeSetLockingDuration(uint256)"(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    SetFeeSetLockingDuration(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    "SetFeeShares(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      shares?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; shares: BigNumber }
    >;

    SetFeeShares(
      user?: string | null,
      pid?: BigNumberish | null,
      shares?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; shares: BigNumber }
    >;

    "SetPoolEnabled(uint256,bool)"(
      pid?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { pid: BigNumber; enabled: boolean }
    >;

    SetPoolEnabled(
      pid?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { pid: BigNumber; enabled: boolean }
    >;

    "SetRevokeLockingDuration(uint256)"(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    SetRevokeLockingDuration(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    "Vote(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Vote(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    ACCOUNTANT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    _isWithdrawable(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addValidatorPool(
      _validator: string,
      _feeShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFeeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountant(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountantLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolWithStatus(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVotingSummary(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _nodeStaking: string,
      _revokeLockingDuration: BigNumberish,
      _feeSetLockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(_validator: string, overrides?: CallOverrides): Promise<BigNumber>;

    nodeStaking(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _validators: string[],
      _rewardAmounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFeeReward(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeVote(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeSetLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeSharesOfValidator(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolEnabled(
      _pid: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevokeLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _pid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCOUNTANT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isWithdrawable(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addValidatorPool(
      _validator: string,
      _feeShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFeeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeSetLockingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountant(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountantLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolWithStatus(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVotingSummary(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _nodeStaking: string,
      _revokeLockingDuration: BigNumberish,
      _feeSetLockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAccountant(
      _accountant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _validators: string[],
      _rewardAmounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingFeeReward(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAccountant(
      _accountant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeLockingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeVote(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeSetLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeSharesOfValidator(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolEnabled(
      _pid: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevokeLockingDuration(
      _lockingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBallot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _pid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
